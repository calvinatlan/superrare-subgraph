// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class WhitelistCreator extends ethereum.Event {
  get params(): WhitelistCreator__Params {
    return new WhitelistCreator__Params(this);
  }
}

export class WhitelistCreator__Params {
  _event: WhitelistCreator;

  constructor(event: WhitelistCreator) {
    this._event = event;
  }

  get _creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Bid extends ethereum.Event {
  get params(): Bid__Params {
    return new Bid__Params(this);
  }
}

export class Bid__Params {
  _event: Bid;

  constructor(event: Bid) {
    this._event = event;
  }

  get _bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AcceptBid extends ethereum.Event {
  get params(): AcceptBid__Params {
    return new AcceptBid__Params(this);
  }
}

export class AcceptBid__Params {
  _event: AcceptBid;

  constructor(event: AcceptBid) {
    this._event = event;
  }

  get _bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CancelBid extends ethereum.Event {
  get params(): CancelBid__Params {
    return new CancelBid__Params(this);
  }
}

export class CancelBid__Params {
  _event: CancelBid;

  constructor(event: CancelBid) {
    this._event = event;
  }

  get _bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Sold extends ethereum.Event {
  get params(): Sold__Params {
    return new Sold__Params(this);
  }
}

export class Sold__Params {
  _event: Sold;

  constructor(event: Sold) {
    this._event = event;
  }

  get _buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SalePriceSet extends ethereum.Event {
  get params(): SalePriceSet__Params {
    return new SalePriceSet__Params(this);
  }
}

export class SalePriceSet__Params {
  _event: SalePriceSet;

  constructor(event: SalePriceSet) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SuperRareV1__currentBidDetailsOfTokenResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }
}

export class SuperRareV1 extends ethereum.SmartContract {
  static bind(address: Address): SuperRareV1 {
    return new SuperRareV1("SuperRareV1", address);
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentBidDetailsOfToken(
    _tokenId: BigInt
  ): SuperRareV1__currentBidDetailsOfTokenResult {
    let result = super.call(
      "currentBidDetailsOfToken",
      "currentBidDetailsOfToken(uint256):(uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return new SuperRareV1__currentBidDetailsOfTokenResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_currentBidDetailsOfToken(
    _tokenId: BigInt
  ): ethereum.CallResult<SuperRareV1__currentBidDetailsOfTokenResult> {
    let result = super.tryCall(
      "currentBidDetailsOfToken",
      "currentBidDetailsOfToken(uint256):(uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SuperRareV1__currentBidDetailsOfTokenResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  approvedFor(_tokenId: BigInt): Address {
    let result = super.call("approvedFor", "approvedFor(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_approvedFor(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "approvedFor",
      "approvedFor(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isWhitelisted(_creator: Address): boolean {
    let result = super.call("isWhitelisted", "isWhitelisted(address):(bool)", [
      ethereum.Value.fromAddress(_creator)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelisted(_creator: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelisted",
      "isWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(_creator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokensOf(_owner: Address): Array<BigInt> {
    let result = super.call("tokensOf", "tokensOf(address):(uint256[])", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigIntArray();
  }

  try_tokensOf(_owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("tokensOf", "tokensOf(address):(uint256[])", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  ownerOf(_tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  originalTokenOfUri(_uri: string): BigInt {
    let result = super.call(
      "originalTokenOfUri",
      "originalTokenOfUri(string):(uint256)",
      [ethereum.Value.fromString(_uri)]
    );

    return result[0].toBigInt();
  }

  try_originalTokenOfUri(_uri: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "originalTokenOfUri",
      "originalTokenOfUri(string):(uint256)",
      [ethereum.Value.fromString(_uri)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  salePriceOfToken(_tokenId: BigInt): BigInt {
    let result = super.call(
      "salePriceOfToken",
      "salePriceOfToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try_salePriceOfToken(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "salePriceOfToken",
      "salePriceOfToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  creatorOfToken(_tokenId: BigInt): Address {
    let result = super.call(
      "creatorOfToken",
      "creatorOfToken(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toAddress();
  }

  try_creatorOfToken(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "creatorOfToken",
      "creatorOfToken(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  creatorPercentage(): BigInt {
    let result = super.call(
      "creatorPercentage",
      "creatorPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_creatorPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "creatorPercentage",
      "creatorPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maintainerPercentage(): BigInt {
    let result = super.call(
      "maintainerPercentage",
      "maintainerPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maintainerPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maintainerPercentage",
      "maintainerPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddNewTokenWithEditionsCall extends ethereum.Call {
  get inputs(): AddNewTokenWithEditionsCall__Inputs {
    return new AddNewTokenWithEditionsCall__Inputs(this);
  }

  get outputs(): AddNewTokenWithEditionsCall__Outputs {
    return new AddNewTokenWithEditionsCall__Outputs(this);
  }
}

export class AddNewTokenWithEditionsCall__Inputs {
  _call: AddNewTokenWithEditionsCall;

  constructor(call: AddNewTokenWithEditionsCall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _editions(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _salePrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddNewTokenWithEditionsCall__Outputs {
  _call: AddNewTokenWithEditionsCall;

  constructor(call: AddNewTokenWithEditionsCall) {
    this._call = call;
  }
}

export class SetSalePriceCall extends ethereum.Call {
  get inputs(): SetSalePriceCall__Inputs {
    return new SetSalePriceCall__Inputs(this);
  }

  get outputs(): SetSalePriceCall__Outputs {
    return new SetSalePriceCall__Outputs(this);
  }
}

export class SetSalePriceCall__Inputs {
  _call: SetSalePriceCall;

  constructor(call: SetSalePriceCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _salePrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetSalePriceCall__Outputs {
  _call: SetSalePriceCall;

  constructor(call: SetSalePriceCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class AcceptBidCall extends ethereum.Call {
  get inputs(): AcceptBidCall__Inputs {
    return new AcceptBidCall__Inputs(this);
  }

  get outputs(): AcceptBidCall__Outputs {
    return new AcceptBidCall__Outputs(this);
  }
}

export class AcceptBidCall__Inputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptBidCall__Outputs {
  _call: AcceptBidCall;

  constructor(call: AcceptBidCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class SetMaintainerPercentageCall extends ethereum.Call {
  get inputs(): SetMaintainerPercentageCall__Inputs {
    return new SetMaintainerPercentageCall__Inputs(this);
  }

  get outputs(): SetMaintainerPercentageCall__Outputs {
    return new SetMaintainerPercentageCall__Outputs(this);
  }
}

export class SetMaintainerPercentageCall__Inputs {
  _call: SetMaintainerPercentageCall;

  constructor(call: SetMaintainerPercentageCall) {
    this._call = call;
  }

  get _percentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaintainerPercentageCall__Outputs {
  _call: SetMaintainerPercentageCall;

  constructor(call: SetMaintainerPercentageCall) {
    this._call = call;
  }
}

export class WhitelistCreatorCall extends ethereum.Call {
  get inputs(): WhitelistCreatorCall__Inputs {
    return new WhitelistCreatorCall__Inputs(this);
  }

  get outputs(): WhitelistCreatorCall__Outputs {
    return new WhitelistCreatorCall__Outputs(this);
  }
}

export class WhitelistCreatorCall__Inputs {
  _call: WhitelistCreatorCall;

  constructor(call: WhitelistCreatorCall) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WhitelistCreatorCall__Outputs {
  _call: WhitelistCreatorCall;

  constructor(call: WhitelistCreatorCall) {
    this._call = call;
  }
}

export class CancelBidCall extends ethereum.Call {
  get inputs(): CancelBidCall__Inputs {
    return new CancelBidCall__Inputs(this);
  }

  get outputs(): CancelBidCall__Outputs {
    return new CancelBidCall__Outputs(this);
  }
}

export class CancelBidCall__Inputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelBidCall__Outputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TakeOwnershipCall extends ethereum.Call {
  get inputs(): TakeOwnershipCall__Inputs {
    return new TakeOwnershipCall__Inputs(this);
  }

  get outputs(): TakeOwnershipCall__Outputs {
    return new TakeOwnershipCall__Outputs(this);
  }
}

export class TakeOwnershipCall__Inputs {
  _call: TakeOwnershipCall;

  constructor(call: TakeOwnershipCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TakeOwnershipCall__Outputs {
  _call: TakeOwnershipCall;

  constructor(call: TakeOwnershipCall) {
    this._call = call;
  }
}

export class SetCreatorPercentageCall extends ethereum.Call {
  get inputs(): SetCreatorPercentageCall__Inputs {
    return new SetCreatorPercentageCall__Inputs(this);
  }

  get outputs(): SetCreatorPercentageCall__Outputs {
    return new SetCreatorPercentageCall__Outputs(this);
  }
}

export class SetCreatorPercentageCall__Inputs {
  _call: SetCreatorPercentageCall;

  constructor(call: SetCreatorPercentageCall) {
    this._call = call;
  }

  get _percentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCreatorPercentageCall__Outputs {
  _call: SetCreatorPercentageCall;

  constructor(call: SetCreatorPercentageCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class AddNewTokenCall extends ethereum.Call {
  get inputs(): AddNewTokenCall__Inputs {
    return new AddNewTokenCall__Inputs(this);
  }

  get outputs(): AddNewTokenCall__Outputs {
    return new AddNewTokenCall__Outputs(this);
  }
}

export class AddNewTokenCall__Inputs {
  _call: AddNewTokenCall;

  constructor(call: AddNewTokenCall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddNewTokenCall__Outputs {
  _call: AddNewTokenCall;

  constructor(call: AddNewTokenCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
